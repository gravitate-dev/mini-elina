using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class HentaiRecovery : MonoBehaviour
{
	//Public
	[Tooltip("Health per second")]
	public float speed = .2f;
	public float decaySpeed = .05f;
	public Image recoveryBarFiller;

	//Private
	[Header("dont touch")]
	[SerializeField]
	private bool isDown;
	[SerializeField]
	private bool isRecovering;
	private float lastRecovered;
	[SerializeField]
	private float recovered;
	private List<System.Guid> disposables = new List<System.Guid>();
	private FreeFlowCharacterController character;

	private void Awake()
	{
		disposables.Add(WickedObserver.AddListener("OnDeath:" + gameObject.GetInstanceID(), OnDeath));
		disposables.Add(WickedObserver.AddListener("OnRevive:" + gameObject.GetInstanceID(), OnRevive));
		disposables.Add(WickedObserver.AddListener("onStartHentaiMove:" + gameObject.GetInstanceID(), OnStartHentai));
	}

	private void Start()
	{
		character = GetComponent<FreeFlowCharacterController>();
	}

	private void Update()
	{
		//Manage recovery accordingly
		if (isRecovering)
		{
			recovered += speed * Time.deltaTime;

			if (Input.GetKeyDown(KeyCode.Space))
				WickedObserver.SendMessage("OnRevive:" + gameObject.GetInstanceID());
		}
		else
			recovered -= decaySpeed * Time.deltaTime;
		recovered = Mathf.Clamp01(recovered);

		//Update recovery bar
		if (recoveryBarFiller)
			recoveryBarFiller.fillAmount = recovered;
	}

	private void OnDeath(object obj)
	{
		isDown = true;
	}

	private void OnRevive(object obj)
	{
		if (isRecovering)
		{
			isRecovering = false;

			character.AddHealth(recovered - lastRecovered);
			print(recovered - lastRecovered);

			isDown = false;
		}
	}

	private void OnStartHentai(object obj)
	{
		if (isDown && !isRecovering)
		{
			lastRecovered = recovered;
			isRecovering = true;
			print("hentaiStart");
		}
	}
}
